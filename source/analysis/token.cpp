#include "token.h"

const std::string Keyword::mPunctuations = "+,-*/%^|&!()[]<>=";

const Bimap<Keyword::Kind, std::string> Keyword::mKindToName = {
  KEYPAIR(Keyword::FUNCTION, "function"),
  KEYPAIR(Keyword::RETURN, "return"),
  KEYPAIR(Keyword::PRINTLN, "println"),
  KEYPAIR(Keyword::PRINT, "print"),
  KEYPAIR(Keyword::IF, "if"),
  KEYPAIR(Keyword::THEN, "then"),
  KEYPAIR(Keyword::ELSE, "else"),
  KEYPAIR(Keyword::ENDIF, "endif"),
  KEYPAIR(Keyword::WHILE, "while"),
  KEYPAIR(Keyword::ENDWHILE, "endwhile"),
  KEYPAIR(Keyword::COMMA, ","),
  KEYPAIR(Keyword::ASSIGN, "="),
  KEYPAIR(Keyword::OR, "or"),
  KEYPAIR(Keyword::AND, "and"),
  KEYPAIR(Keyword::BITWISE_OR, "|"),
  KEYPAIR(Keyword::BITWISE_AND, "&"),
  KEYPAIR(Keyword::BITWISE_XOR, "^"),
  KEYPAIR(Keyword::EQUAL, "=="),
  KEYPAIR(Keyword::NOT_EQUAL, "!="),
  KEYPAIR(Keyword::LESS, "<"),
  KEYPAIR(Keyword::LEQ, "<="),
  KEYPAIR(Keyword::GREATER, ">"),
  KEYPAIR(Keyword::GEQ, ">="),
  KEYPAIR(Keyword::SHL, "<<"),
  KEYPAIR(Keyword::SHR, ">>"),
  KEYPAIR(Keyword::PLUS, "+"),
  KEYPAIR(Keyword::MINUS, "-"),
  KEYPAIR(Keyword::MULTIPLY, "*"),
  KEYPAIR(Keyword::DIVIDE, "/"),
  KEYPAIR(Keyword::MODULE, "%"),
  KEYPAIR(Keyword::LEFT_PARENTHESIS, "("),
  KEYPAIR(Keyword::RIGHT_PARENTHESIS, ")"),
  KEYPAIR(Keyword::LEFT_SQUARE, "["),
  KEYPAIR(Keyword::RIGHT_SQUARE, "]"),
  KEYPAIR(Keyword::COLON, ","),
  KEYPAIR(Keyword::QUOTE, "\""),
  KEYPAIR(Keyword::GOTO, "goto"),
  KEYPAIR(Keyword::GLOBAL, "global")
};